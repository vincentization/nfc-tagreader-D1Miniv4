wifi:
  networks:
    - ssid: !secret wifi_ssid          # Enter your WiFi SSID here. Example: `ssid: 'your_network_name'`
      password: !secret wifi_password      # Enter your wifi password here. Example: `password: 'abcde123456'`
  ap:
    ssid: ${name}

esp8266:
  board: d1_mini

substitutions:
  name: tagreader1
  friendly_name: TagReader 1

dashboard_import:
  package_import_url: github://adonno/tagreader/tagreader.yaml

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  
  project:
    name: adonno.tag_reader
    version: dev

  on_boot:
    priority: -10
    then:
    - wait_until:
        api.connected:
    - logger.log: API is connected!
    - light.turn_on:
        id: nfc_led
        brightness: 100%
        red: 0%
        green: 0%
        blue: 100%
        flash_length: 500ms
    - switch.turn_on: nfc_led_enabled
    - switch.turn_on: alarm_led_enabled
    - delay: 2s
    - light.turn_on:
        id: alarm_led
    - script.execute: update_leds


text_sensor:
  - platform: version
    hide_timestamp: true
    name: "${friendly_name} ESPHome Version"
    entity_category: diagnostic
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
      icon: mdi:wifi
      entity_category: diagnostic
    ssid:
      name: "${friendly_name} Connected SSID"
      icon: mdi:wifi-strength-2
      entity_category: diagnostic
  - platform: homeassistant
    id: alarm_state
    entity_id: alarm_control_panel.alarmo
    on_value:
      then:
        - light.turn_on:
            id: alarm_led
        - switch.turn_on: alarm_led_enabled
        - script.execute: update_leds

# Define switches to control LED and buzzer from HA
switch:
- platform: template
  name: "${friendly_name} NFC Status LED enabled"
  id: nfc_led_enabled
  icon: mdi:alarm-light-outline
  optimistic: true
  restore_mode: RESTORE_DEFAULT_ON
  entity_category: config
- platform: template
  name: "${friendly_name} Alarm Status LED enabled"
  id: alarm_led_enabled
  icon: mdi:alarm-light-outline
  optimistic: true
  restore_mode: RESTORE_DEFAULT_ON
  entity_category: config
- platform: template
  name: "Enable Unknown Tag Scanning"
  id: unknown_tag_enabled
  optimistic: true
  restore_mode: RESTORE_DEFAULT_OFF
  entity_category: config

# Define buttons for writing tags via HA
button:
  - platform: template
    name: Write Tag Random
    id: write_tag_random
    # Optional variables:
    icon: "mdi:pencil-box"
    on_press:
      then:
      - light.turn_on:
          id: nfc_led
          brightness: 100%
          red: 100%
          green: 0%
          blue: 100%
      - lambda: |-
          static const char alphanum[] = "0123456789abcdef";
          std::string uri = "https://www.home-assistant.io/tag/";
          for (int i = 0; i < 8; i++)
            uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
          uri += "-";
          for (int j = 0; j < 3; j++) {
            for (int i = 0; i < 4; i++)
              uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
            uri += "-";
          }
          for (int i = 0; i < 12; i++)
            uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
          auto message = new nfc::NdefMessage();
          message->add_uri_record(uri);
          ESP_LOGD("tagreader", "Writing payload: %s", uri.c_str());
          id(pn532_board).write_mode(message);
      - wait_until:
          not:
            pn532.is_writing:
      - light.turn_off:
          id: nfc_led
  - platform: template
    name: Clean Tag
    id: clean_tag
    icon: "mdi:nfc-variant-off"
    on_press:
      then:
      - light.turn_on:
          id: nfc_led
          brightness: 100%
          red: 100%
          green: 64.7%
          blue: 0%
      - lambda: 'id(pn532_board).clean_mode();'
      - wait_until:
          not:
            pn532.is_writing:
      - light.turn_off:
          id: nfc_led
  - platform: template
    name: Cancel writing
    id: cancel_writing
    icon: "mdi:pencil-off"
    on_press:
      then:
      - lambda: 'id(pn532_board).read_mode();'
      - light.turn_off:
          id: nfc_led

  - platform: restart
    name: "${friendly_name} Restart"
    entity_category: config

# Enable logging
logger:
  # level: VERY_VERBOSE
  # level: VERBOSE

# Enable Home Assistant API
api:
  services:

  - service: write_tag_id
    variables:
      tag_id: string
    then:
    - light.turn_on:
        id: nfc_led
        brightness: 100%
        red: 100%
        green: 0%
        blue: 0%
    - lambda: |-
        auto message = new nfc::NdefMessage();
        std::string uri = "https://www.home-assistant.io/tag/";
        uri += tag_id;
        message->add_uri_record(uri);
        id(pn532_board).write_mode(message);
    - wait_until:
        not:
          pn532.is_writing:
    - light.turn_off:
        id: nfc_led

# Enable OTA upgrade
ota:
  - platform: esphome

i2c:
  scan: False
  frequency: 400kHz

globals:
  - id: source
    type: std::string
  - id: url
    type: std::string
  - id: info
    type: std::string

pn532_i2c:
  id: pn532_board
  on_tag:
    then:
    - if:
        condition:
          switch.is_on: nfc_led_enabled
        then:
        - light.turn_on:
            id: nfc_led
            brightness: 100%
            red: 0%
            green: 0%
            blue: 100%
            flash_length: 300ms

    - delay: 300ms #to fix slow component

    - lambda: |-
        id(source)="";
        id(info)="";
        if (tag.has_ndef_message()) {
          auto message = tag.get_ndef_message();
          auto records = message->get_records();
          for (auto &record : records) {
            std::string payload = record->get_payload();
            std::string type = record->get_type();
            size_t hass = payload.find("https://www.home-assistant.io/tag/");
            
            if (type == "U" and hass != std::string::npos ) {
              ESP_LOGD("tagreader", "Found Home Assistant tag NDEF");
              id(source)="hass";
              id(info)=payload.substr(hass + 34);
            }
            else if (type == "T" ) {
              id(info)=payload;
            }
            else if ( id(source)=="" ) {
              id(source)="uid";
            }
          }
        }
        else {
          id(source)="uid";
        }

    - if:
        condition:
          lambda: 'return ( id(source)=="uid" );'
        then:
          - light.turn_on:  #LED Lights up RED
              id: nfc_led
              brightness: 100%
              red: 100%
              green: 0%
              blue: 0%
              flash_length: 300ms
          - if:        
              condition:
                switch.is_on: unknown_tag_enabled #only send tag id to HA when switch is on
              then:
                - homeassistant.tag_scanned: !lambda |-
                    ESP_LOGD("tagreader", "No HA NDEF, using UID");
                    return x;

    - if:
        condition:
          lambda: 'return ( id(source)=="hass" );'
        then:
          - homeassistant.tag_scanned: !lambda 'return id(info);'
          - light.turn_on:  #LED Lights up GREEN
              id: nfc_led
              brightness: 100%
              red: 0%
              green: 100%
              blue: 0%
              flash_length: 300ms

  on_tag_removed:
    then:
    - homeassistant.event:
        event: esphome.tag_removed

script:
  - id: update_leds
    then:
      - lambda: |-
          auto state = id(alarm_state).state;
          
          // Reset to off state
          id(alarm_led).make_call().set_effect("None").set_rgb(0.0, 0.0, 0.0).perform();

          if (state == "disarmed") {
            id(alarm_led).make_call().set_effect("None").set_rgb(0.0, 1.0, 0.0).perform();  // solid green
            id(nfc_led).make_call().set_state(false).perform();
          } else if (state == "arming") {
            id(alarm_led).make_call().set_effect("Yellow White Strobe").perform();
          } else if (state == "armed_away" || state == "armed_home") {
            id(alarm_led).make_call().set_rgb(1.0, 0.0, 0.0).set_effect("Pulse Slow").perform();
          } else if (state == "triggered") {
            id(alarm_led).make_call().set_effect("Red Strobe").perform();
            id(nfc_led).make_call().set_state(true).perform();
            id(nfc_led).make_call().set_effect("Red Strobe").perform();
          }

# Configure LED
light:
- platform: neopixelbus
  variant: WS2812
  pin: 2
  num_leds: 1
  flash_transition_length: 500ms
  type: GRB
  id: alarm_led
  name: "${friendly_name} Alarm Status LED"
  restore_mode: ALWAYS_OFF
  effects:
    - pulse:
        name: Pulse Slow
        transition_length: 1500ms
        update_interval: 1500ms
        min_brightness: 20%
        max_brightness: 100%
    - pulse:
        name: Pulse Fast
        transition_length: 200ms
        update_interval: 400ms
        min_brightness: 30%
        max_brightness: 60%
    - strobe:
        name: Red Strobe
        colors:
          - state: true
            brightness: 100%
            red: 100%
            green: 0%
            blue: 0%
            duration: 300ms
          - state: false
            duration: 300ms
    - strobe:
        name: Yellow White Strobe
        colors:
        - state: true
          red: 100%
          green: 100%
          blue: 0%
          brightness: 100%
          duration: 200ms   # Yellow
        - state: false
          duration: 100ms
        - state: true
          red: 100%
          green: 100%
          blue: 100%
          brightness: 40%
          duration: 200ms   # White
- platform: neopixelbus
  variant: WS2812
  pin: 0
  num_leds: 1
  type: GRB
  id: nfc_led
  name: "${friendly_name} NFC Status LED"
  restore_mode: ALWAYS_OFF
  effects:
    - strobe:
        name: Red Strobe
        colors:
          - state: false
            duration: 300ms
          - state: true
            brightness: 100%
            red: 100%
            green: 0%
            blue: 0%
            duration: 300ms